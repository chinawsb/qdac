
@@qaes
本单元基于EldoS, Alexander Ionov的EIAES重装封装改动而来，特别感谢！

AES加密是一种对称加密，理论上密文与原文长度一致，但由于AES是基于块加密的，所以产生的密文长度实际上是16的整数倍，不足的部分被填充为#0。所以如果要准确还原加密
前的数据，你在保存时，应保存下其原始长度，以便解密后，对长度进行截断。
为了方便上层用户，本单元提供了一个全局变量AlignAESBlockSize，为False时，将自动截断。



关于CBC和EBC

EBC是最原始的加密方法，CBC引入了初始化向量来与原始数据先异或再执行EBC相同的加密

操作，理论上CBC更安全一点点。

@@!!OVERLOADED_Decrypt_qaes.TQAES
AES解密函数

@@!!MEMBERTYPE_Properties_qaes.TQAES
TQAES属性列表

@@!!FUNCTIONS_qaes
QAES单元发布的函数列表

@@!!CLASSES_qaes
QAES类型定义

@@!!RECORDS_qaes
结构体、记录及枚举值

@@!!TYPES_qaes
类型

@@!!VARIABLES_qaes
全局变量，用于控制全局的设置选项

@@!!SYMREF
QDAC是一个免费的开源项目，您不需要为使用本项目的内容支付任何费用。如果您觉得本源码对您有帮助，愿意赞助本项目的发展（非强制），以使作者不为生活所迫，有更多的精力为您呈现更好的作品，可以赞助作者。

QDAC允许您自由的复制、分发、修改本源码，但您的修改应该反馈给作者，并允许作者在必要时，合并到本项目中以供使用，合并后的源码同样遵循QDAC版权声明限制。

您的产品的关于中，应包含以下的版本声明:

本产品使用的XXXX来自QDAC项目，版权归作者所有，官方网站：www.qdac.cc。



【注意】

作者对本项目的品质不提供任何担保，您在使用本项目的源码之前，请确认这一点。QDAC开发组不为由此给您及您客户造成的任何损失承担任何法律及道义责任。



【技术支持】

如有技术问题，您可以加入QDAC官方QQ群250530692共同探讨，但请注意这是一个技术群，偶尔风花雪月没什么关系，但不要刷屏造成大家的困扰，同时，不要进行任何人身语言攻击，否则将被T出群。

本项目目前没有提供任何帮助文件，所有的函数等我尽量在源码中加入足够的注释，以便大家了解。



如有其它问题，可以发邮件到109867294@qq.com。



【赞助】

支付宝：

guansonghuan@sina.com 姓名：管耸寰



建设银行：

户名：管耸寰

账号：4367 4209 4324 0179 731

开户行：建设银行长春团风储蓄所

@@qmacros
QMacros是QDAC的一个新的组成部分，采用宏定义的方式来快速替换复杂的文本内容模板。如下面的一句话：

My Name is &lt;%Name%&gt;,Please call me &lt;%FirstName%&gt;

我们定义如下宏：

Name =&gt;Jone Stand

FirstName =&gt; Jone

使用QMacros执行下面的替换操作后：

<c>AMacroMgr := TQMacroManager.Create;</c>

<c>AMacroMgr.Push('Name',Jone Stand');</c>

<c>AMacroMgr.Push('FirstName','Jone');</c>

<c>S:=AMacroMgr.Replace('My Name is &lt;%Name%&gt;,Please
call me &lt;%FirstName%&gt;', '&lt;%','%&gt;',0);</c>

<c> </c>此时字符串S的值即为：

My Name is Jone Stand,Please call me Jone

QMacros的特色在于：

● 支持在替换时自定义宏的起始和结束字符串，两者可以一样，也可以不一样，但一定要保证宏定义中间不会出现该字符；

● 采用栈式管理，使用使用宏最后入栈的值替换，当不使用新值时，可以出栈恢复末次的值；

●
支持保存点功能，可以设置保存点并在其后多次入栈新的宏定义，只需要在最后还原到保存的保存点，就可以恢复所有保存点保存时的宏定义原状；

● 支持大小写区分和忽略大小写两种处理模式；

● 支持动态取值宏定义（相当于简单的函数），可以让宏定义每次替换时对应不同的值；

● 使用二分法查找宏定义名称，更快的解析替换速度；

● 支持模板预编译，方便一次编译，多次替换；

@@!!OVERLOADED_Pop_qmacros.TQMacroManager
出栈指定的宏定义

@@!!OVERLOADED_Push_qmacros.TQMacroManager
入栈相关的宏定义

@@!!OVERLOADED_Replace_qmacros.TQMacroManager
执行替换操作

@@qmsgpack
QMsgPack 是 QDAC 项目组对 MessagePack 协议的封装实现，支持MessagePack官方规格表（<exref target="https://github.com/msgpack/msgpack/blob/master/spec.md">链接</exref>）的所有数据类型，包括扩展类型。

由于Delphi下MessagePack协议的实现较少，所以没有什么啥速度比较。我们目前提供了一个Demo供大家测试其性能，该文件位于
Demos\\Delphi\\VCL\\QMsgPack
目录下，编译Demo，然后运行打开或保存时都会进行一个简单的性能评估，给您做参考。在我的计算机上，加载一个30多M的文件，用时不到1秒，参考下图：
<paraattr align="center">
<img name="QMsgPackLoadSpeed" />
</paraattr>

QMsgPack单元使用需要以下文件支持：

● qdac.inc - 公共编译选项配置文件

● qstring.pas - QDAC 字符串及辅助函数单元

● qrbtree.pas - 红黑树及哈希表实现单元

● qmsgpack.pas -
QMsgPack主实现单元，它包括两个类：TQMsgPack和TQHashedMsgPack，两者的区别在于前者没有使用哈希针对查询进行全面优化，理论上查询性能要弱于后者，但相应的其它方面的开销也要小于后者。

QMsgPack的接口和QJSON几乎完全一致，您熟悉一个，另一个几乎不用学习就可以直接使用。而QXML的接口也与它们保持了基本一致，三个的学习一个，剩下的两个都可以触类旁通。

@@!!OVERLOADED_Add_qmsgpack.TQMsgPack
Add 系列函数用于添加一个 MessagePack 结点到当前根结点下。

@@!!OVERLOADED_CopyIf_qmsgpack.TQMsgPack
CopyIf 系列函数用户通过用户自定义过滤函数实现只拷贝部分数据的功能。

@@!!OVERLOADED_Delete_qmsgpack.TQMsgPack
Delete 系列函数用于函数特定的结点

@@!!OVERLOADED_DeleteIf_qmsgpack.TQMsgPack
DeleteIf 系列函数用于让用户自行过滤确实要删除的结点。

@@!!OVERLOADED_FindIf_qmsgpack.TQMsgPack
FindIf 系列函数用于让用户指定一个过滤方法来确定查找某个结点。

@@!!OVERLOADED_FromRtti_qmsgpack.TQMsgPack
FromRtti系列函数用于从指定的RTTI实例中生成MsgPack数据

@@!!OVERLOADED_ItemByName_qmsgpack.TQMsgPack
ItemByName 函数用于按指定的名称查找当前目录下的子结点。

@@!!OVERLOADED_Parse_qmsgpack.TQMsgPack
Parse 系列函数用于从二进制数据流中直接解码 MessagePack 协议格式的数据内容。

@@!!OVERLOADED_Remove_qmsgpack.TQMsgPack
Remove 用于从当前结点中移除而不是删除指定的结点，与 Delete 不同的是，Remove
不会释放被移除的结点，需要用户手工释放。

@@!!OVERLOADED_ToRtti_qmsgpack.TQMsgPack
ToRtti 函数用于将 TQMsgPack 对象赋值给相应地址对应的对象或记录上。

@@QuickStart
<property name="title" value="快速入门指南" />

QWorker是QDAC组件库中的一个重要组成部分，是基于作业的Delphi/C++
Builder并行编程框架。它的目标是降低在Delphi和C++Builder多线程编程的复杂度。

QWorker首先是从作业的角度来规划多线程编程，通过将要完成的目标任务分解成一个个作业，从而达到简化编程模型，提高系统运行效率的目的。

关于 QWorker 的相关说明文档，可以访问 <exref target="http://www.qdac.cc">官方网站</exref>
的 <exref target="http://www.qdac.cc/?p=1792">QWorker 专题</exref>。

@@引言
QWorker 是 QDAC
项目带给大家的一套多线程并行编程框架。它基于作业的视角来规划作业多线程编程，简化多线程编程的步骤和方法和交互手法。

首先，我们要明白我们为什么需要多线程并行编程？

我们之所以使用多线程编程，一般目的不外乎下面两个：

1、避免程序界面假死带来的恶劣用户体验。

2、充分利用现代计算机的处理资源，来加快业务的处理速度。

当然，您可能有更好更多的理由来做多线程编程，但上面的这两个理由对于一般的人来说足够了。

接下来，一个新的问题来了，我们为什么要什么 QWorker 而不是系统自带的多线程框架来编程？

这个理由实际上很简单，使用 QWorker
会进一步简化你的编程逻辑的设计，使你更专注于业务流程的规划和实现，而不去管理线程池及处理资源的调度问题。

那么，什么是作业？

在 QWorker
中，所谓的作业就是一个逻辑上的业务处理单元。我们要实现一个复杂的任务时，可以将其分解成一到多个小的任务，每个任务由一个函数来管理，这个函数我们就可以将其理解为一项作业，而这些函数的组合就构成了一个作业分组。作业我们可以让其运行在主线程或者后台线程，注意一点，主线程不适合进行长时间作业，那样会造成主线程阻塞，造成假死的现象，影响用户体验。

现在看看，QWorker 为我们提供了什么呢？

1、一个跨平台的异步执行体系

一旦我们通过 Workers.Post 直接来投寄一个异步作业，这个作业将在后台被计划执行。

2、一个跨平台的计划任务框架

通过 At 函数，可以满足作业定时执行的需求。

3、一个高精度的后台线程定时器

通过 Post 时设置重复间隔，可以简单的生成一个定时重复作业，实现后台线程定时器的效果。

4、一个松散耦合的业务框架

通过信号建立不同模块的不同单元的联系，可以很好的实现模块间的松散耦合和自动触发。

5、一个流程管理框架

通过作业组（TQJobGroup）可以将多个作业管理在一起，然后串行或并行执行，并在全部作业执行完成时，得到相应的事件通知，当然也可以等待全部作业执行完成。

6、一个并行操作引擎

通过 Workers.For 可以并行循环执行同一个过程，而直接Post到后台的作业，也会被计划成并行执行。

7、一个线程池

QWorker 提供了一个自动管理线程生命周期的线程池。当然如上所述，它的功能远不止于此。

我们接下来，从现实的逻辑上来对比以加深 QWorker 体系的理解。我们先将其中的触角分配一下：

作业（JOB） – 用户交付要完成的任务

工作者（Worker）- 完成任务的工人

作业管理器（Workers）- 包工头

首先，包工头会雇佣少数固定工人以完成基本的工作，它的数量，在 QWorker 中，由 Workers.MinWorkers
决定，默认值为2，不能小于1。没有这些工人，一旦有作业过来，包工头得现招人，显然很浪费时间，而如果始终养着一帮工人，对于包工头来说，显然投资（资源占用）太大。一旦作业多了，忙不过来怎么办，那就需要招聘新工人来解决了所有工人的数量由
Workers.MaxWorkers属性来决定，默认是CPU
核心数*2+1。但长期养着那么多临时工是不可能的，但立即解雇显然也不好（万一后面紧接着有新作业到来还得现雇），所以包工头会在一段时间没活后，将尽量解雇工人直到达到
Workers.MinWorkers 指定的限制，以减少投资。这个时间，由 Workers.FireTimeout
来决定，默认是15秒。

当作业被用户交付给包工头后，根据作业的不同，需要包工头在不同的时间点安排工人去执行。到了执行的时候，包工头会从现在雇佣的工人中，找有没有空闲的工人，如果有，直接交付处理，如果没有，则雇佣新的工人来完成作业。

在后面的章节，我们将进一步分析和了解如何使用 QWorker 进行多线程编程。

@@qworker
QWorker是QDAC组件库中的一个重要组成部分，是基于作业的Delphi/C++
Builder并行编程框架。它的目标是降低在Delphi和C++Builder多线程编程的复杂度。

QWorker首先是从作业的角度来规划多线程编程，通过将要完成的目标任务分解成一个个作业，从而达到简化编程模型，提高系统运行效率的目的。

关于 QWorker 的相关说明文档，可以访问 <exref target="http://www.qdac.cc">官方网站</exref>
的 <exref target="http://www.qdac.cc/?p=1792">QWorker 专题</exref>。

在使用 QWorker 进行并行多线程编程之前，建议您先查看网站上的 <exref target="http://www.qdac.cc/?p=1792">基于
QWorker 的多线程编程专题</exref>
